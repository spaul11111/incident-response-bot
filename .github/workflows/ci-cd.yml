name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    env:
      # Use GitHub secrets for testing
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
      SLACK_APP_TOKEN: ${{ secrets.SLACK_APP_TOKEN }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      NODE_ENV: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
      continue-on-error: true
    
    - name: Build TypeScript
      run: npm run build
    
    - name: Run component tests
      run: npm run test:components
      continue-on-error: true
    
    - name: Test environment variables
      run: |
        echo "Testing environment variables..."
        if [ -z "$SLACK_BOT_TOKEN" ]; then
          echo "❌ SLACK_BOT_TOKEN is not set"
          exit 1
        else
          echo "✅ SLACK_BOT_TOKEN is set"
        fi
        
        if [ -z "$SLACK_SIGNING_SECRET" ]; then
          echo "❌ SLACK_SIGNING_SECRET is not set"
          exit 1
        else
          echo "✅ SLACK_SIGNING_SECRET is set"
        fi
        
        echo "🎉 All required secrets are available"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-k8s:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: Create Helm values file with secrets
      run: |
        cat > helm/values-ci.yaml << EOF
        image:
          repository: ghcr.io/${{ github.repository }}
          tag: ${{ github.sha }}
          pullPolicy: Always
        
        slack:
          botToken: "${{ secrets.SLACK_BOT_TOKEN }}"
          signingSecret: "${{ secrets.SLACK_SIGNING_SECRET }}"
          appToken: "${{ secrets.SLACK_APP_TOKEN }}"
        
        # Use SQLite for CI deployment
        postgresql:
          enabled: false
        
        monitoring:
          enabled: false
        
        # Resource limits for CI
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 50m
            memory: 64Mi
        
        env:
          NODE_ENV: "production"
        EOF
    
    - name: Validate Helm chart
      run: |
        helm lint helm/incident-response-bot
        helm template incident-response-bot helm/incident-response-bot -f helm/values-ci.yaml > /tmp/rendered.yaml
        echo "✅ Helm chart validation successful"
    
    - name: Deploy to staging (dry-run)
      run: |
        echo "🚀 Would deploy to staging with:"
        echo "Image: ghcr.io/${{ github.repository }}:${{ github.sha }}"
        echo "Chart: helm/incident-response-bot"
        echo "Values: helm/values-ci.yaml"
        echo "Namespace: bot-staging"
        echo ""
        echo "Helm command would be:"
        echo "helm upgrade --install incident-response-bot helm/incident-response-bot \\"
        echo "  --namespace bot-staging \\"
        echo "  --create-namespace \\"
        echo "  --values helm/values-ci.yaml \\"
        echo "  --wait --timeout=10m"

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
